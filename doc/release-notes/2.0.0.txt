KWIVER v2.0.0 Release Notes
===========================

This is a major release of KWIVER with a focus on improving the C++ API to reduce
repetitive code when writing plugins and to improve the integration with Python
compared the previous v1.8.0 release. Python improvements include calling KWIVER
algorithms from Python and defining new KWIVER algorithms in Python. This release
will also support distributing KWIVER as a Python package via wheels. This will
allow KWIVER to better integrate with modern machine learning applications. As
part of this release the primary site for hosting KWIVER will move from
GitHub to gitlab.kitware.com.

This release does change some aspects of the KWIVER API, in particular, the way
specific implementations of algorithms are instantiated has changed. Applications
based on KWIVER with have to be adapted to work with the new API. Also, the sprokit
process pipelines are not included with this new release. This functionality will
be restored in a future release.

Specific updates to the algorithms and bug fixes are listed below.

Updates
-------

Vital: Types

* Added interfaces for copying uninterpreted video data.

Arrows: Core

* Implemented the csv_reader reading std::optional fields.

* Increased the precision of written floats and doubles in the csv_writer.

* Made the transcode applet's failure to open a video result in a more graceful exit.

* Made the transcode applet ask for video settings slightly later, when they
  might be more accurate.

* Added pass-throughs for uninterpreted video data in the metadata_filter and
  buffered_metadata_filter video inputs.

Arrows: FFmpeg

* Added check for incoming raw video packets' timestamps and stream indices.

* Added functionality to copy the input video's start timestamp when transcoding.

* Removed imagery_enabled option from ffmpeg_video_input.

* Added proper handling for changing size or pixel format mid-video.

* Improved probing behavior and increased duration.

* Ensured proper clearing of video state even when seek attempts fail.

* Exposed codec options in ffmpeg_video_settings.

* Optimized copying behavior when encoding frames.

* Implemented packet lookahead to ensure stream synchronization.

* Implemented copy of audio streams from input to output.

* Fixed bugs causing invalid output when transcoding between .mp4 and .ts files.

* Made the MPEG-TS stream id take precedence when determining KLV stream synchronicity.

Arrows: KLV

* Ensured that NaN comparisons happen consistently across all data structures.

* Throw an exception when reading an out-of-bounds IMAP value.

* Made the compare-klv applet's failure to open a video result in a more graceful exit.

* Disabled initialization of image writer in dump-klv if no images are to be written.

* Accounted for missing or extra frames in compare-klv.

* Implemented metadata_map_io_csv.load_().

* Modified flint, IMAP, and integer behavior to print a warning when writing
  values with incorrect lengths instead of correcting the length and possibly
  losing data.

* Ensured integer wrapper data formats (enum, enum bitfield) use the same
  lenient length logic as integers to prevent crashes when writing invalid data.

* Added has_nanoseconds to misp_timestamp.

* Added frame_timestamp() to klv_metadata.

* Added tag 143 (Metadata Substream ID) to ST0601.

* Implement remaining obscure IMAP features.

Examples:

* Added python versions of existing examples.

* New example demonstrating how to parse KLV data.

Testing:

* Test coverage has been expanded in multiple arrows.

Tools:

* Adding an implementation of the dump_klv tool in python

Bug Fixes
---------

Arrows: KLV

* Fixed an integer promotion bug when writing the ST0806 user defined data
  type / id field.

* Prevented KLV applets from building when tools are disabled.
